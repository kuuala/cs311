
// ==========================================================================
//  GPPG error listing for yacc source file <SimpleYacc.y>
// ==========================================================================
//  Version:  1.3.6
//  Machine:  LAPTOP-1ISHOG01
//  DateTime: 09.11.2018 15:03:33
//  UserName: kumar
// ==========================================================================


%{
// Ýòè îáúÿâëåíèÿ äîáàâëÿþòñÿ â êëàññ GPPGParser, ïðåäñòàâëÿþùèé ñîáîé ïàðñåð, ãåíåðèðóåìûé ñèñòåìîé gppg
    public BlockNode root; // Êîðíåâîé óçåë ñèíòàêñè÷åñêîãî äåðåâà 
    public Parser(AbstractScanner<ValueType, LexLocation> scanner) : base(scanner) { }
%}

%output = SimpleYacc.cs

%union { 
			public double dVal; 
			public int iVal; 
			public string sVal; 
			public Node nVal;
			public ExprNode eVal;
			public StatementNode stVal;
			public BlockNode blVal;
       }

%using ProgramTree;

%namespace SimpleParser

%token BEGIN END CYCLE ASSIGN SEMICOLON WHILE DO REPEAT UNTIL FOR TO WRITE IF THEN ELSE LEFT_BRACKET RIGHT_BRACKET
%token <iVal> INUM 
%token <dVal> RNUM 
%token <sVal> ID

%type <eVal> expr ident 
%type <stVal> assign statement cycle while repeat for write if
%type <blVal> stlist block

%%
// Warning: NonTerminal symbol "if" is unreachable
// Error: NonTerminal symbol "if" has no productions
// Error: There are 1 non-terminating NonTerminal Symbols
   //  {if}
// Warning: Terminating if fixes the following size-1 NonTerminal set
   // {if}
// ------------------------------------------------------------------

progr   : block { root = $1; }
		;

stlist	: statement 
			{ 
				$$ = new BlockNode($1); 
			}
		| stlist SEMICOLON statement 
			{ 
				$1.Add($3); 
				$$ = $1; 
			}
		;

statement: assign { $$ = $1; }
		| block   { $$ = $1; }
		| cycle   { $$ = $1; }
		| while   { $$ = $1; }
		| repeat  { $$ = $1; }
		| for     { $$ = $1; }
		| write   { $$ = $1; }
	;

ident 	: ID { $$ = new IdNode($1); }	
		;
	
assign 	: ident ASSIGN expr { $$ = new AssignNode($1 as IdNode, $3); }
		;

expr	: ident  { $$ = $1 as IdNode; }
		| INUM { $$ = new IntNumNode($1); }
		;

block	: BEGIN stlist END { $$ = $2; }
		;

cycle	: CYCLE expr statement { $$ = new CycleNode($2, $3); }
		;
	
while   : WHILE expr DO statement { $$ = new WhileNode($2, $4); }
        ;
        
repeat  : REPEAT stlist UNTIL expr { $$ = new RepeatNode($2, $4); }
        ;
        
for     : FOR ident ASSIGN expr TO expr DO statement { $$ = new ForNode($2 as IdNode, $4, $6, $8); }
        ;

write   : WRITE LEFT_BRACKET expr RIGHT_BRACKET { $$ = new WriteNode($3); }
        ;
        
%%

// ==========================================================================

